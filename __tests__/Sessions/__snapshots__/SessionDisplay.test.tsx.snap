// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<SessionDisplay /> should match snapshot 1`] = `
<View>
  <View
    style={
      Object {
        "borderBottomColor": "#C5CCD6",
        "borderBottomWidth": 0.5,
        "flexDirection": "row",
        "marginHorizontal": 5,
        "marginTop": 5,
      }
    }
  >
    <View
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "alignItems": "center",
          "borderBottomColor": "#000000",
          "borderBottomWidth": 3,
          "color": "#D3D3D3",
          "flex": 1,
          "fontSize": 18,
          "opacity": 1,
          "paddingBottom": 10,
        }
      }
    >
      <Text
        style={
          Array [
            Object {
              "color": "#000000",
              "fontSize": 20,
            },
            Object {
              "fontWeight": "bold",
            },
          ]
        }
      >
        Scheduled
      </Text>
    </View>
    <View
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "alignItems": "center",
          "color": "#D3D3D3",
          "flex": 1,
          "fontSize": 18,
          "opacity": 1,
          "paddingBottom": 10,
        }
      }
    >
      <Text
        style={
          Array [
            Object {
              "color": "#000000",
              "fontSize": 20,
            },
            null,
          ]
        }
      >
        History
      </Text>
    </View>
  </View>
  <View
    style={
      Object {
        "marginVertical": 10,
      }
    }
  >
    <RCTScrollView
      data={Array []}
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={21}
    >
      <View />
    </RCTScrollView>
  </View>
</View>
`;
